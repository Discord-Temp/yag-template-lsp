func str(x)
	Converts the argument to a string, returning the empty string on failure. This function is an alias of the
	`toString` function.

func toString(x)
	Converts the argument to a string, returning the empty string on failure.

func toInt(x)
	Converts the argument to an integer, returning zero on failure.

func toInt64(x)
	Converts the argument to an `int64`, returning zero on failure.

func toFloat(x)
	Converts the argument to a `float64`, returning zero on failure.

func toDuration(x)
	Converts the argument, which may be a number (measured in nanoseconds) or a duration string such as `5m`, to a
	duration object. Returns the zero duration on failure.

func toRune(str)
	Converts the given string to a slice of runes (Unicode code points.)

func toByte(str)
	Converts the given string to a slice of UTF-8 bytes.

func hasPrefix(str, prefix)
	Tests whether the string starts with the given prefix.

func hasSuffix(str, suffix)
	Tests whether the string ends with the given suffix.

func joinStr(sep, args...)

func lower(str)
	Converts the input to lowercase.

func slice(v, from, to?)

func split(str, sep)

func title(str)
	Returns the string with the first letter of each word capitalized.

func trimSpace(str)
	Returns the string with all leading and trailing whitespace removed.

func upper(str)
	Converts the string to uppercase.

func urlescape(str)

func urlunescape(str)

func print(args...)
	Concatenates the arguments in order, adding spaces between operands when neither is a string.

func println(args...)
	Concatenates the arguments in order, adding spaces between operands when neither is a string and inserting a newline
	at the end.

func printf(format, args...)
	Interpolates the arguments using the format given. See the [Go fmt package documentation](https://pkg.go.dev/fmt).

func sanitizeText(string)
	Replaces accented and confusable characters in the input with their normal, ISO-Latin variants.

func reQuoteMeta(string)
	Escapes all regular expression metacharacters in the argument text; the returning string is a regular expression
	matching the literal text.

func add(x, y...)
	Returns the sum of the provided numbers. The type of the result is inferred based on the type of the first argument.

func cbrt(x)
	Returns the cube root of the argument.

func div(x, y...)
	Returns the result of dividing `x` by the following arguments in succession. The type of division (integer or
	floating-point) performed is dependent on the type of the first argument, so `{{ div 5 2 }}` performs integer
	division and yields `2`. To force floating-point division, use the `fdiv` function.

func fdiv(x, y...)
	Returns the result of the floating-point division of `x` by the following arguments in succession.

func log(x, base?)
	Returns the logarithm of x to the given base. If no base is provided, returns the natural logarithm (base `e`.)

func mathConst(const)
	Returns the value of the specified math constant. See the [math constants
	list](https://pkg.go.dev/math#pkg-constants).

func max(x, y)
	Returns the larger number between `x` and `y`.

func min(x, y)
	Returns the smaller number between `x` and `y`.

func mod(x, y)
	Returns the floating-point remainder fo the division of x by y.

	Takes the sign of X, so `mod -5 3` results in `-2`, not `1`. To ensure a non-negative result, use `mod` twice:
	`{{ mod (add (mod x y) y) y }}`.

func mult(x, y...)
	Returns the product of the arguments. The type of the result is inferred based on the type of the first argument.

func pow(base, exp)
	Returns `base^exp` as a floating-point number.

func round(x)
	Returns the nearest integer to `x` as a floating-point number.

func roundCeil(x)
	Returns the smallest integer greater than or equal to `x`.

func roundEven(x)
	Returns the nearest integer to `x`, preferring even integers in the case of a tie.

func roundFloor(x)
	Returns the largest integer less than or equal to `x`.

func sqrt(x)
	Returns the square root of `x` as a floating-point number.

func sub(x, y...)
	Starting with `x`, subtract the following arguments in succession. The type of the result is inferred based on the
	type of the first argument.

func bitwiseAnd(x, y)
	Returns `x & y`.

func bitwiseOr(x, y)
	Returns `x | y`.

func bitwiseXor(x, y)
	Returns `x ^ y`.

func bitwiseNot(x)
	Returns `~x`.

func bitwiseAndNot(x, y)
	Returns `x & ~y`, which effectively strips the bits in `y` from `x`.

func bitwiseLeftShift(x, shift)
	Returns `x << shift`.

func bitwiseRightShift(x, shift)
	Returns `x >> shift`.

func humanizeThousands(x)
	Returns the number as a string with commas separating thousands.

func dict(keyvalues...)
	Creates a dictionary from the provided key-value pairs. The number of arguments msut be even.

func sdict(keyvalues...)
	Creates a string dictionary from the provided key-value pairs. The number of arguments must be even.

func structToSdict(struct)

func cembed(opts...)
	Returns an embed object to send with [sendMessage](#sendmessage)-related functions.

	All keys are optional, but the Discord API will reject completey empty embeds, so *some* content is required.

	- `title`: the title of the embed
	- `url`: the URL to hyperlink the title with
	- `description`: the main text
	- `color`: which color to display on the left side of the embed
	- `fields`: a slice of sdicts with the following keys:
		- `name`: the name of the field
		- `value`: which text to have inside this field
		- `inline`: an optional boolean whether this field should be displayed in-line with other fields
	- `author`: Shows some details at the very top of the embed. Is an sdict with the following keys:
		- `name`: The name of the author
		- `url`: the URL to hyperlink the name with
		- `icon_url`: the author's icon
	- `thumbnail`: a small image in the top-right corner. Is an sdict with the following keys:
		- `url`: the image's URL
	- `image`: an image to display at full width at the bottom of the embed. Is an sdict with the following keys:
		- `url`: the image's URL
	- `footer`: Shows some details at the very bottom of the embed. Is an sdict with the following keys:
		- `text`: the footer's text
		- `icon_url`: a small icon to display to the left of the footer's text
	- `timestamp`: a (static) timestamp to display to the right of the footer's text

func cslice(els...)
	Creates a slice containing the given elements in order.

func complexMessage(opts...)
	Creates a complex message object for use in `sendMessage` functions.

	- `allowed_mentions`: an sdict with the following keys:
		- `parse`: a slice of accepted values for mentions. May include `users`, `roles`, and `everyone`.
		- `users`: a slice of user IDs to mention.
		- `roles`: a slice of role IDs to mention.
		- `replied_user`: whether to mention the replied user.
	- `content`: the message content.
	- `embed`: an embed object or a slice of up to 10 embed objects.
	- `file`: the content to print as a file.
	- `filename`: the name of the file.
	- `reply`: the ID of the message to reply to.
	- `silent`: whether to suppress push and desktop notifications.

	All of these keys are optional, but providing an empty content, file, or no embeds will result in no message being sent.

	### Example

	The following example will output a message with an embed, some content, and a file attachment. It will also reply to
	the triggering message and ping the author of that message, but suppress the resulting notification.

	```yag
	{{ $message := complexMessage
		"allowed_mentions" (sdict
			"replied_user" true
		)
		"content" "Hello, world!"
		"embed" (cembed
			"title" "Embed Title"
			"description" "Embed Description"
			"color" 0xff0000
		)
		"file" "This is a file."
		"filename" "example.txt"
		"reply" .Message.ID
		"silent" true
	}}
	{{ sendMessage nil $message }}
	```

func complexMessageEdit(opts...)
	Creates a complex message object for use in `editMessage` functions.

	- `allowed_mentions`: an sdict with the following keys:
		- `parse`: a slice of accepted values for mentions. May include `users`, `roles`, and `everyone`.
		- `users`: a slice of user IDs to mention.
		- `roles`: a slice of role IDs to mention.
		- `replied_user`: whether to mention the replied user.
	- `content`: the new content for the message.
	- `embed`: an embed object or a slice of up to 10 embed objects.
	- `silent`: whether to suppress push and desktop notifications.

	All of these keys are optional, but providing none of them will have no effect.

func kindOf(value, indirect?)
	Returns the [kind](https://pkg.go.dev/reflect#Kind) of the provided value.

	If `value` is behind an `interface{}` or pointer, setting `indirect` to true will read the inner value. Most users
	of this function will want to do this.

func adjective()
	Returns a random adjective.

func in(haystack, needle)
	Returns whether `haystack` contains `needle`. The haystack may be a slice or a string; in the latter case, the
	needle must also be a string and `in` reports whether `needle` is a substring of `haystack`.  

func inFold(haystack, needle)
	Same as `in`, but case-insensitive.

func json(v, indent?)

func jsonToSdict(jsonStr)

func noun()
	Returns a random noun.

func randInt(min?, max)
	Returns a uniformally distributed random integer in the half-open inteval `[min, max)`. That is, `min` is included;
	`max` is excluded. If only one argument is given, it is interpreted as a maximum bound and a random integer in `[0,
	max)` is returned.

func roleAbove(x, y)
	Returns whether the first role is above the second in the role hierarchy.

func seq(start, stop)
	Creates a slice containing the integers between `start` (inclusive) and `stop` (exclusive) in order. Limited to
	10,000 elements.

func shuffle(list)
	Returns a shuffled copy of the provided array or slice.

func verb()
	Returns a randmo verb.

func currentTime()
	Returns the current time in UTC.

func parseTime(value, layout, location?)

func formatTime(time, layout?)

func loadLocation(location)

func newDate(year, month, day, hour, minute, second, location?)

func snowflakeToTime(snowflake)

func timestampToTime(unix)

func weekNumber(time)

func humanizeDurationHours(dur)

func humanizeDurationMinutes(dur)

func humanizeDurationSeconds(dur)

func humanizeTimeSinceDays(dur)
