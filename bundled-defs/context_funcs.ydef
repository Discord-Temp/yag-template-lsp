== Message functions
func editMessage(channel, messageID, newContent)
	Edits the specified message, escaping any mentions in the content.

func editMessageNoEscape(channel, messageID, newContent)
	Edits the specified message without escaping mentions.

func pinMessage(channel, messageID)
	Pins the specified message.

func publishMessage(channel, messageID)
	Publishes the specified message.

func publishResponse()
	Publishes the response message.

	For this to work, the custom command must be running in an announcement channel.

func sendDM(message)
	Sends a direct message to the triggering user.

func sendMessage(channel, message)
	Sends a message to the specified channel, escaping any role, @everyone, or @here mentions in the content.

func sendMessageRetID(channel, message)
	Same as `sendMessage`, but returns the message ID.

func sendMessageNoEscape(channel, message)
	Sends a message to the specified channel without escaping any mentions.

func sendMessageNoEscapeRetID(channel, message)
	Same as `sendMessageNoEscape`, but returns the message ID.

func sendTemplate(channel, template, data?)
	Executes the specified associated template with optional data and sends its response to `channel`, returning the ID
	of the response message.

func sendTemplateDM(template, data?)
	Same as `sendTemplate`, but sends the response to the triggering user's direct messages instead and returns the ID
	of the response message.

func mentionEveryone()
	Mentions `@everyone` without escaping it.

func mentionHere()
	Mentions `@here` without escaping it.

func getMessage(channel, messageID)
	Returns the full message object specified by the arguments.

func unpinMessage(channel, messageID)
	Unpins the specified message.

func deleteMessage(channel, messageID, delay?)
	Deletes the specified message.

	- `delay`: an optional delay in seconds before deleting the response (default: 10 seconds). Max 86400 seconds,
	corresponding to 1 day.

func deleteResponse(delay?)
	Deletes the response message.

	- `delay`: an optional delay in seconds before deleting the response (default: 10 seconds). Max 86400 seconds,
	corresponding to 1 day.

func deleteTrigger(delay?)
	Deletes the triggering message.

	- `delay`: an optional delay in seconds before deleting the trigger (default: 10 seconds). Max 86400 seconds,
	corresponding to 1 day.



== Role functions
func mentionRole(role)
	Mentions the role, which may specified by ID, mention, name, or role object, without escaping.

func mentionRoleID(roleID)
	Mentions the specified role without escaping.

func mentionRoleName(roleName)
	Mentions the role with the given name without escaping it.

func addRole(role, delay?)
	Adds the specified role to the triggering member.

	- `role`: a role ID, mention, name, or role object.
	- `delay`: an optional delay in seconds.

func addRoleID(roleID, delay?)
	Adds the specified role to the triggering member after an optional delay in seconds.

func addRoleName(roleName, delay?)
	Adds the specified role to the triggering member after an optional delay in seconds.

func removeRole(role, delay?)
	Removes the specified role from the triggering member.

	- `role`: a role ID, mention, name or role object.
	- `delay`: an optional delay in seconds.

func removeRoleID(roleID, delay?)
	Removes the specified role from the triggering member after an optional delay in seconds.

func removeRoleName(roleName, delay?)
	Removes the specified role from the triggering member after an optional delay in seconds.

func giveRole(target, role, delay?)
	Gives the specified role to the target member.

	- `target`: a user ID, mention, or user object. The target must be part of the server.
	- `role`: a role ID, mention, name or role object.
	- `delay`: an optional delay in seconds.

func giveRoleID(target, roleID, delay?)
	Gives the specified role to the target member after an optional delay in seconds.

func giveRoleName(target, roleName, delay?)
	Gives the specified role to the target member after an optional delay in seconds.

func takeRole(target, role, delay?)
	Removes the specified role from the target member.

	- `target`: a user ID, mention, or user object. The target must be part of the server.
	- `role`: a role ID, mention, name or role object.
	- `delay`: an optional delay in seconds.

func takeRoleID(target, roleID, delay?)
	Removes the specified role from the target member after an optional delay in seconds.

func takeRoleName(target, roleName, delay?)
	Removes the specified role from the target member after an optional delay in seconds.

func setRoles(target, newRoles)
	Edits the roles of the target member. The roles are completely overwritten, so any existing roles that do not appear
	in the new list will be removed.

	- `target`: a user ID, mention, or user object. The target must be part of the server.
	- `newRoles`: a slice of role IDs or role objects.

func hasRole(role)
	Reports whether the triggering member has the specified role.

	- `role`: a role ID, mention, name, or role object.

func hasRoleID(roleID)
	Reports whether the triggering member has the specified role.

func hasRoleName(roleName)
	Reports whether the triggering member has the specified role.

func targetHasRole(target, role)
	Reports whether the target member has the specified role.

	- `target`: a user ID, mention, or user object. The target must be part of the server.
	- `role`: a role ID, mention, name, or role object.

func targetHasRoleID(target, roleID)
	Reports whether the target member has the specified role.

func targetHasRoleName(target, roleName)
	Reports whether the target member has the specified role.

func getRole(role)
	Returns the role object with the specified ID, name, or mention.

func getRoleID(roleID)
	Returns the role object with the specified ID.

func getRoleName(name)
	Returns the role object with the specified name.



== Reaction functions
func addReactions(emojis...)
	Adds reactions to the triggering message.

	- `emojis...`: the emojis to react with. May also be a slice of emojis.

	Default emojis should be specified using their Unicode form, and custom emojis should be specified using the format
	`name:id`. See the example below.

	### Example

	```yag
	{{ addReactions "üëç" "üëé" "yagpdb:505114640032858114" }}
	```

func addResponseReactions(emojis...)
	Adds reactions to the response message.

	- `emojis...`: the emojis to react with. May also be a slice of emojis.

func addMessageReactions(channel, messageID, emojis...)
	Adds reactions to the specified message.

	- `emojis...`: the emojis to react with. May also be a slice of emojis.

func deleteAllMessageReactions(channel, messageID, userID, emojis...)
	Deletes reactions from a message. By default, this function will remove all reactions, but setting the `emojis...`
	parameter will result in only those reactions being removed.

	- `emojis`: the reaction emojis to remove. May also be a slice of emojis. Omitting this argument will delete all reactions.

func deleteMessageReaction(channel, messageID, userID, emojis...)
	Deletes a specific user's reactions from a message.

	- `userID`: the ID of the user whose reaction to delete.
	- `emojis...`: one or more emojis to delete. May also be a slice of emojis.



== Permission functions
func hasPermissions(permission)
	Reports whether the triggering member has the specified [permission bit][perm-bits].

	**Tip:** The `.Permissions` context data field contains all the permission bits by name so that, for instance,
	`.Permissions.Administrator` is `0x0000000000000008`.

	[perm-bits]: https://discord.com/developers/docs/topics/permissions#permissions-bitwise-permission-flags

func targetHasPermissions(target, permissions)
	Reports whether the target member has the specified [permission bit][perm-bits].

	[perm-bits]: https://discord.com/developers/docs/topics/permissions#permissions-bitwise-permission-flags

func getTargetPermissionsIn(target, channelID)
	Returns the permissions of the target member in the specified channel as a [permissions bitfield][perms].
	The bitfield can then be manipulated using the `bitwise*` family of functions (e.g., `bitwiseAnd`.)

	[perms]: https://discord.com/developers/docs/topics/permissions#permissions



== Channel functions
func getChannel(channel)
	Returns the channel object with the specified ID, name, or mention. Will not work for threads; use
	`getChannelOrThread` instead if that is desired.

func getThread(thread)
	Returns the thread object with the specified ID, name, or mention. Will not work for channels; use
	`getChannelOrThread` instead if that is desired.

func getChannelOrThread(channel)
	Returns the channel or thread object with the specified ID, name, or mention. 

func editChannelName(channel, newName)
	Edits the name of the specified channel.

	This function is, together with `editChannelTopic`, limited to 10 calls per custom command execution. In addition,
	Discord ratelimits the number of channel modifications to 2 per 10 minutes.

func editChannelTopic(channel, newTopic)
	Edits the topic of the specified channel.

	This function is, together with `editChannelName`, limited to 10 calls per custom command execution. In addition,
	Discord ratelimits the number of channel modifications to 2 per 10 minutes.

func getPinCount(channel)
	Returns the number of pinned messages in the given channel.

func getChannelPins(channel)
	Returns a slice of message objects pinned in the given channel or thread.

	Limited to 2 (premium: 4) calls per custom command execution.

func createThread(channel, messageID, name, private?, autoArchiveDuration?, invitable?)
	Creates a new thread in the specified channel. Returns a channel object on success.

	- `channel`: the parent channel to create the thread in.
	- `message`: either `nil` to create a channel thread, or a message ID to create a message thread.
	  Note that there is no functional difference between a channel thread and a message thread.
	- `private`: whether the thread is private. Defaults to false.
	- `auto_archive_duration`: how long the thread will show in the channel list after inactivity before it is archived.
	  Valid values are 60, 1440, 4320, and 10080 minutes. Defaults to 10080 (7 days).
	- `invitable`: whether non-moderators can add other members to the thread. Defaults to false.

	Because the optional arguments are positional, modifying a given parameter requires specifying all earlier ones even
	if you only wish to change one parameter from the default. Consider the following example to create a public thread
	in the current channel that is archived after an hour and allows non-moderators to add others:

	```yag
	{{ createThread nil nil "new thread" false 60 true }}
	```

func editThread(thread, opts...)
	Edits the specified thread.

	- `opts`: a sdict containing the thread parameters to edit, supporting the following keys (all optional):
		- `slowmode`: the thread's slowmode in seconds.
		- `tags`: one or more forum tag name or ID. Duplicate and invalid tags are ignored.
		- `auto_archive_duration`: how long the thread will show in the channel list after inactivity.
		  Valid values are 60, 1440, 4320, and 10080 minutes. Defaults to 10080 (7 days).
		- `invitable`: whether non-moderators can add other members to the thread. Defaults to false.

func openThread(thread)
	Reopens the given thread.

func deleteThread(thread)
	Deletes the given thread.

func closeThread(thread, lock?)
	Closes the given thread, optionally locking it as well.

func addThreadMember(thread, member)
	Adds a member to the specified thread.

func removeThreadMember(thread, member)
	Removes a member from the specified thread.

func createForumPost(channel, name, content, opts...)
	Creates a new forum post. Returns a channel object on success.

	- `channel`: the forum channel to post to.
	- `name`: the post title; may not be empty.
	- `content`: the initial message's content; may be a string, an embed, or a complex message. May not be empty.
	- `opts`: a sdict containing additional options for the post, supporting the following keys (all optional):
		- `slowmode`: the thread's slowmode in seconds.
		- `tags`: one or more forum tag name or ID. Duplicate and invalid tags are ignored.

func deleteForumPost(post)
	Deletes the given forum post.

	This function is an alias of `deleteThread`. Use whichever function is more semantically meaningful in the context
	of your custom command.

func pinForumPost(post)
	Pins the given forum post.

func unpinForumPost(post)
	Unpins the given forum post.



== User and member functions
func getMember(member)
	Returns the member object with the specified ID or mention.

func getMemberVoiceState(member)
	Returns the voice state for the member specified by ID or mention, or nil if the member is not in a voice channel.

func editNickname(newNick)
	Edits the nickname of the triggering member. The bot must have the `MANAGE_NICKNAMES` permission and be higher in
	role hierarchy than the member. The bot cannot change the nickname of the server owner.

func currentUserAgeHuman()
	Returns the account age of the current user in a human-readable format.

func currentUserAgeMinutes()
	Returns the account age of the current user in a human-readable format, rounded down to minutes.

func currentUserCreated()
	Returns the time object corresponding to when the current user was created.

func onlineCount()
	Returns the number of online members on the current server, including bots.

func onlineCountBots()
	**Deprecated.** This function no longer works and will always return `0`.



== Regular expression functions
func reFind(regex, text)
	Returns the first match of the regular expression in the text, or the empty string if the pattern did not match
	anywhere.

func reFindAll(regex, text, count?)
	Returns a slice of successive matches of the regular expression in the text. If `count` is provided, the number of
	matches is limited to that amount; otherwise, all matches are returned.

func reFindAllSubmatches(regex, text, count?)
	Returns a slice of successive submatches of the regular expression in the text. Each submatch is itself a slice
	containing the match of the entire expression, followed by any matches of capturing groups.

func reReplace(regex, text, replacement)
	Replaces all occurrences of the regular expression in `text` with `replacement`.

func reSplit(regex, text, count?)
	Splits the text around each match of the regular expression, returning a slice of delimited substrings.

	If the `count` parameter is specified, it limits the number of substrings to return:

	- `count > 0`: at most `count` substrings; the last substring will be the unsplit remainder;
	- `count == 0`: the result is nil (zero substrings);
	- `count < 0`: all substrings.



== Miscellanous functions
func sleep(seconds)
	Pauses the execution of the custom command for the specified number of seconds. The maximum total duration that a
	custom command can sleep for is 60 seconds.

func sort(list, opts...)
	Returns the given slice or array in sorted order, ascending by default. The elements of the list must have the same
	type. Additional options may be provided, with the following keys:

	- `key`: if sorting a list of maps, this option specifies the key to sort by. The key must be present in
	  all maps.
	- `reverse`: whether to sort the list in descending order, so that larger elements appear first. By default,
	  the sort order is ascending.

	Limited to 1 call on regular servers and 3 calls on premium servers.
