== Logs plugin
func pastUsernames(userID, offset)

func pastNicknames(userID, offset)



== Tickets plugin
func createTicket(author, topic)
	Creates a new ticket with the topic given associated with the specified user.

	- `author`: the member to associate this ticket with.
	- `topic`: the topic of this ticket. Must be a string.

	For this function to work, the ticket system must be enabled.

func exec(command, args...)
	Executes the specified built-in command, optionally with arguments.

	This will not work for commands with paginated embed results, e.g. `warnings`.

func execAdmin(command, args...)
	Executes the specified built-in command with the triggering user set to the bot, optionally with arguments.

func userArg(input)
	Returns the full user object with the given ID or mention.



== Custom command plugin
func parseArgs(numRequired, errorMsg, cargs...)
	Parses arguments passed to the custom command. Ensures that at least `numRequired` arguments are passed and parses
	the arguments according to the defined `cargs...`, emitting `errorMsg` and exiting the custom command on error. An
	empty error message indicates that one should be automatically generated based on the argument definitions.

	The return value of `parseArgs` is an object with methods `$args.Get n` and `$args.IsSet n`. Calling `$args.IsSet N`
	reports whether the nth argument (starting from 0) was provided, and `$args.Get n` retrieves that argument if so.

	### Example

	```yag
	{{ $args := parseArgs 1 "" (carg "int" "coolness level" 0 100) (carg "member" "target member") }}
	Coolness: {{ $args.Get 0 }}
	{{- if $args.IsSet 1 }}
		Target: {{ ($args.Get 1).User }}
	{{- else }}
		Target: {{ .User }}
	{{ end }}
	```

func carg(type, name, min?, max?)
	Defines an argument with the given type.

	The available types are:
	- `int`: Resolves to an integer.
	- `float`: Resolves to a floating-point number.
	- `string`: Resolves to a string.
	- `user`: Resolves to a user object. Accepts user mentions and IDs. The user must be in the server.
	- `userid`: Resolves to an ID. Accepts user mentions and IDs but performs no additional validation.
	- `member`: Resolves to a member object. Accepts user mentions and IDs.
	- `channel`: Resolves to a channel object. Accepts channel mentions and IDs.
	- `role`: Resolves to a role object. Accepts role names and IDs.
	- `duration`: Resolves to a duration object. Accepts human-readable representations of durations,
	such as `10h5m` or `10 hours 5 minutes`.

	The `int`, `float`, and `duration` types support optional minimum and maximum bounds, both inclusive. For the
	`duration` type, the minimum and maximum bounds are measured in seconds.

func execCC(ccID, channel, delay, data)
	Executes another custom command specified by `ccID`.

	- `ccID`: the ID of the custom command to execute.
	- `channel`: the channel to execute the custom command in. May be `nil`, a channel ID, or a channel name.
	- `delay`: the delay in seconds before executing the custom command.
	- `data`: some arbitrary data to pass to the executed custom command.

	### Example

	The following example showcases a custom command executing itself.

	```yag
	{{ if .ExecData }}
		{{ sendMessage nil (print "Executing custom command... Got data: " .ExecData) }}
		{{ return }}
	{{ end }}

	{{ sendMessage nil "Starting up..." }}
	{{ execCC .CCID nil 5 "Hello, world!" }}
	```

func scheduleUniqueCC(ccID, channel, delay, key, data)
	Schedules a custom command execution to occur in the future, identified by `key`.

	- `ccID`: the ID of the custom command to execute.
	- `channel`: the channel to execute the custom command in. May be `nil`, a channel ID, or a channel name.
	- `delay`: the delay in seconds before executing the custom command.
	- `key`: a unique key to identify the scheduled custom command.
	- `data`: some arbitrary data to pass to the executed custom command.

	To cancel a scheduled custom command execution, use `cancelScheduledUniqueCC`.

func cancelScheduledUniqueCC(ccID, key)
	Cancels a previously scheduled custom command execution.




== Custom command database
func dbSet(userID, key, value)
	Sets the value for the specified `key` and `userID` to `value`.

	- `value`: an arbitrary value to set.

func dbSetExpire(userID, key, value, ttl)
	Same as `dbSet` but with an additional expiry `ttl` in seconds.

func dbIncr(userID, key, delta)
	Increments the value of the specified database entry by `delta`. Returns the new value as a floating-point number.
	To decrement, pass a negative delta. 

	- `delta`: the amount to increment the value by. Must be a valid number.

func dbGet(userID, key)
	Returns the specified database entry.

func dbGetPattern(userID, pattern, limit, numSkip)	
	Returns up to `limit` entries from the database in ascending order as a slice.

	- `userID`: the user ID to retrieve entries for.
	- `pattern`: the PostgreSQL pattern to match entries against.
	- `limit`: the maximum number of entries to return, capped at 100.
	- `numSkip`: the number of entries to skip before returning results.

	See `dbGetPatternReverse` for a function that retrieves entries in descending order.

func dbGetPatternReverse(userID, pattern, limit, numSkip)
	Returns up to `limit` entries from the database in descending order as a slice.

	- `userID`: the user ID to retrieve entries for.
	- `pattern`: the PostgreSQL pattern to match entries against.
	- `limit`: the maximum number of entries to return, capped at 100.
	- `numSkip`: the number of entries to skip before returning results.

	See `dbGetPatternReverse` for a function that retrieves entries in descending order.

func dbDel(userID, key)
	Deletes the specified entry from the database.

func dbDelByID(userID, entryID)
	Deletes the database entry by ID.

func dbDelById(userID, entryID)
	An alias of `dbDelByID`.

func dbDelMultiple(query, limit, numSkip)
	Deletes up to `limit` entries from the database matching the given criteria. Returns the number of deleted entries.

	- `query`: a sdict with the following (all optional) keys:
		- `userID`: only delete entries with a matching UserID field. Defaults to all users.
		- `pattern`: only delete entries with keys matching the given pattern. Defaults to all keys.
		- `reverse`: whether to delete entries with the lowest value first. Default is `false` (highest value first).
	- `limit`: the maximum number of entries to delete, capped at 100.
	- `numSkip`: the number of entries to skip before deleting.

func dbTopEntries(pattern, limit, numSkip)
	Returns up to `limit` entries from the database, sorted in descending order by the numeric value, then by entry ID.

	- `pattern`: the PostgreSQL pattern to match entries against.
	- `limit`: the maximum number of entries to return, capped at 100.
	- `numSkip`: the number of entries to skip before returning results.

func dbBottomEntries(pattern, limit, numSkip)
	Returns up to `limit` entries from the database, sorted in descending order by the numeric value, then by entry ID.

	- `pattern`: the PostgreSQL pattern to match entries against.
	- `limit`: the maximum number of entries to return, capped at 100.
	- `numSkip`: the number of entries to skip before returning results.

func dbCount(query?)
	Returns the count of all database entries that are not expired.

	If `query` is provided, it specifies which entries to include:
	- a user ID: only count entries for the given user ID.
	- a PostgreSQL pattern: only count entries with keys matching the given pattern.
	- a query object supporting the given options:
		- `userID`: only count entries with a matching UserID field. Defaults to all users.
		- `pattern`: only counts entries with keys matching the given pattern. Defaults to all keys.

func dbRank(query, userID, key)
	Returns the rank of the specified entry in the sorted collection of entries defined by `query`.

	- `query`: a sdict with the following optional keys:
		- `userID`: only include entries with the given user ID.
		- `pattern`: only include entries with keys matching the given pattern.
	- `reverse`: if `true`, entries with lower values have higher ranks. Default is `false`.
