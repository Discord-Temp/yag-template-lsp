{"mod":{"name":"mod","signature":"{{ mod x y }}","doc":"Returns the floating-point remainder of the division of `x` by `y`.\n\nThe result has the same sign as `x`, so `mod -5 3` results in `-2`, not `1`. To ensure a non-negative result, use `mod` twice: `{{ mod (add (mod x y) y) y }}`."},"printf":{"name":"printf","signature":"{{ printf format args... }}","doc":"Interpolates the arguments using the format given. See the [Go fmt package documentation](https://pkg.go.dev/fmt)."},"upper":{"name":"upper","signature":"{{ upper str }}","doc":"Converts the string to uppercase."},"deleteTrigger":{"name":"deleteTrigger","signature":"{{ deleteTrigger [delay] }}","doc":"Deletes the triggering message.\n- `delay`: an optional delay in seconds before deleting the trigger (default: 10 seconds). Max 86400 seconds,\ncorresponding to 1 day."},"humanizeDurationHours":{"name":"humanizeDurationHours","signature":"{{ humanizeDurationHours dur }}","doc":"Returns the duration as a human-readable string, rounded down to the nearest hour,."},"max":{"name":"max","signature":"{{ max x y }}","doc":"Returns the larger of the two numbers `x` and `y`."},"getTargetPermissionsIn":{"name":"getTargetPermissionsIn","signature":"{{ getTargetPermissionsIn target channelID }}","doc":"Returns the permissions of the target member in the specified channel as a [permissions bitfield][perms]. The bitfield can then be manipulated using the `bitwise*` family of functions (e.g., `bitwiseAnd`.)\n\n[perms]: https://discord.com/developers/docs/topics/permissions#permissions"},"cmodal":{"name":"cmodal","signature":"{{ cmodal opts... }}","doc":"Creates a [modal object][discord-modals] for use in interactions. See `sendModal` for more detail.\n\n[discord-modals]: https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-response-object-modal"},"lower":{"name":"lower","signature":"{{ lower str }}","doc":"Converts the input to lowercase."},"getResponse":{"name":"getResponse","signature":"{{ getResponse interactionToken messageID }}","doc":"Returns the response or follow-up with the specified message ID belonging to the given interaction as a message object. Is also valid for ephemeral messages."},"getRoleID":{"name":"getRoleID","signature":"{{ getRoleID roleID }}","doc":"Returns the role object with the specified ID."},"complexMessageEdit":{"name":"complexMessageEdit","signature":"{{ complexMessageEdit opts... }}","doc":"Creates a complex message edit object that can then be passed to the `editMessage` functions.\n- `allowed_mentions`: a sdict with the following keys:\n  - `parse`: a slice of accepted values for mentions. May include `users`, `roles`, and `everyone`.\n  - `users`: a slice of user IDs to mention.\n  - `roles`: a slice of role IDs to mention.\n  - `replied_user`: whether to mention the replied user.\n- `content`: the new content for the message.\n- `embed`: an embed object or a slice of up to 10 embed objects.\n- `silent`: whether to suppress push and desktop notifications.\nAll keys are optional."},"humanizeDurationSeconds":{"name":"humanizeDurationSeconds","signature":"{{ humanizeDurationSeconds dur }}","doc":"Returns the duration as a human-readable string, rounded down to the nearest second."},"hasSuffix":{"name":"hasSuffix","signature":"{{ hasSuffix str suffix }}","doc":"Tests whether the string ends with the given suffix."},"getMemberVoiceState":{"name":"getMemberVoiceState","signature":"{{ getMemberVoiceState member }}","doc":"Returns the voice state for the member specified by ID or mention, or nil if the member is not in a voice channel."},"adjective":{"name":"adjective","signature":"{{ adjective }}","doc":"Returns a random adjective."},"execCC":{"name":"execCC","signature":"{{ execCC ccID channel delay data }}","doc":"Executes the custom command specified by `ccID` after a delay.\n- `ccID`: the ID of the custom command to execute.\n- `channel`: the channel to execute the custom command in. May be `nil`, a channel ID, or a channel name.\n- `delay`: the delay in seconds before executing the custom command.\n- `data`: arbitrary data to pass to the executed custom command.\n### Example\nThe following example showcases a custom command executing itself.\n```yag\n{{ if .ExecData }}\n  {{ sendMessage nil (print \"Executing custom command... Got data: \" .ExecData) }}\n  {{ return }}\n{{ end }}\n\n{{ sendMessage nil \"Starting up...\" }}\n{{ execCC .CCID nil 5 \"Hello, world!\" }}\n```"},"mentionRoleID":{"name":"mentionRoleID","signature":"{{ mentionRoleID roleID }}","doc":"Mentions the specified role without escaping."},"giveRoleID":{"name":"giveRoleID","signature":"{{ giveRoleID target roleID [delay] }}","doc":"Gives the specified role to the target member after an optional delay in seconds."},"reFindAllSubmatches":{"name":"reFindAllSubmatches","signature":"{{ reFindAllSubmatches regex text [count] }}","doc":"Returns a slice of successive submatches of the regular expression in the text. Each submatch is itself a slice containing the match of the entire expression, followed by any matches of capturing groups."},"noun":{"name":"noun","signature":"{{ noun }}","doc":"Returns a random noun."},"deleteResponse":{"name":"deleteResponse","signature":"{{ deleteResponse [delay] }}","doc":"Deletes the response message.\n- `delay`: an optional delay in seconds before deleting the response (default: 10 seconds). Max 86400 seconds,\ncorresponding to 1 day."},"cbrt":{"name":"cbrt","signature":"{{ cbrt x }}","doc":"Returns the cube root of `x` as a floating-point number."},"dbIncr":{"name":"dbIncr","signature":"{{ dbIncr userID key by }}","doc":"Increments the value of the specified database entry. Returns the new value as a floating-point number. To decrement, provide a negative value for `by`.\n- `by`: the amount to increment the value by. Must be a valid number."},"currentUserAgeHuman":{"name":"currentUserAgeHuman","signature":"{{ currentUserAgeHuman }}","doc":"Returns the account age of the current user in a human-readable format."},"humanizeDurationMinutes":{"name":"humanizeDurationMinutes","signature":"{{ humanizeDurationMinutes dur }}","doc":"Returns the duration as a human-readable string, rounded down to the nearest minute."},"encodeBase64":{"name":"encodeBase64","signature":"{{ encodeBase64 str }}","doc":"Encodes the argument iasn base-64."},"dbGet":{"name":"dbGet","signature":"{{ dbGet userID key }}","doc":"Returns the specified database entry object, or `nil` if it does not exist."},"round":{"name":"round","signature":"{{ round x }}","doc":"Returns the nearest integer to `x` as a floating-point number."},"mentionRole":{"name":"mentionRole","signature":"{{ mentionRole role }}","doc":"Mentions the role, which may specified by ID, mention, name, or role object, without escaping."},"ne":{"name":"ne","signature":"{{ ne x y }}","doc":"Returns the boolean truth of `x != y`."},"takeRoleID":{"name":"takeRoleID","signature":"{{ takeRoleID target roleID [delay] }}","doc":"Removes the specified role from the target member after an optional delay in seconds."},"dbDel":{"name":"dbDel","signature":"{{ dbDel userID key }}","doc":"Deletes the specified entry from the database, doing nothing if it does not exist."},"addThreadMember":{"name":"addThreadMember","signature":"{{ addThreadMember thread member }}","doc":"Adds a member to the specified thread."},"split":{"name":"split","signature":"{{ split str sep }}","doc":"Splits the string around each instance of the separator, returning a slice of delimited substrings."},"pastUsernames":{"name":"pastUsernames","signature":"{{ pastUsernames userID offset }}","doc":"**Deprecated.** This function no longer works and will always return an error."},"sendMessageNoEscape":{"name":"sendMessageNoEscape","signature":"{{ sendMessageNoEscape channel message }}","doc":"Sends a message to the specified channel without escaping any mentions."},"carg":{"name":"carg","signature":"{{ carg type name [min] [max] }}","doc":"Defines an argument with the given type and name.\n\nThe available types are:\n- `int`: resolves to an integer.\n- `float`: resolves to a floating-point number.\n- `string`: resolves to a string.\n- `user`: resolves to a user object. Accepts user mentions and IDs. The user must be in the server.\n- `userid`: resolves to an ID. Accepts user mentions and IDs but performs no additional validation.\n- `member`: resolves to a member object. Accepts user mentions and IDs.\n- `channel`: resolves to a channel object. Accepts channel mentions and IDs.\n- `role`: resolves to a role object. Accepts role names and IDs.\n- `duration`: resolves to a duration object. Accepts human-readable representations of durations,\nsuch as `10h5m` or `10 hours 5 minutes`.\n\nThe `int`, `float`, and `duration` types support optional minimum and maximum bounds, both inclusive. For the `duration` type, the minimum and maximum bounds are measured in seconds."},"sendMessage":{"name":"sendMessage","signature":"{{ sendMessage channel message }}","doc":"Sends a message to the specified channel, escaping any role, @everyone, or @here mentions in the content."},"timestampToTime":{"name":"timestampToTime","signature":"{{ timestampToTime unixSecs }}","doc":"Returns the UTC time corresponding to the given Unix time, measured in seconds since January 1, 1970."},"dbRank":{"name":"dbRank","signature":"{{ dbRank query userID key }}","doc":"Returns the rank of the specified entry in the collection of entries defined by `query`, ordered by numeric entry value then by entry ID.\n- `query`: a sdict specifying the collection of entries to rank the specified entry in, supporting the following keys\n  (all optional):\n  - `userID`: only include entries with the given user ID.\n  - `pattern`: only include entries with keys matching the given pattern.\n  - `reverse`: if `true`, entries with lower values have higher ranks. Default is `false`."},"dict":{"name":"dict","signature":"{{ dict keyvalues... }}","doc":"Creates a dictionary from the provided key-value pairs. The number of arguments must be even."},"urlquery":{"name":"urlquery","signature":"{{ urlquery v }}","doc":"Returns the escaped value of the textual representation of the arguments in a form suitable for embedding in a URL query."},"len":{"name":"len","signature":"{{ len v }}","doc":"Returns the integer length of the argument."},"sort":{"name":"sort","signature":"{{ sort list opts... }}","doc":"Returns the given slice or array in sorted order, ascending by default. The elements of the list must have the same type. Additional options may be provided, with the following keys:\n- `key`: if sorting a list of maps, this option specifies the key to sort by. The key must be present in\n  all maps.\n- `reverse`: whether to sort the list in descending order, so that larger elements appear first. By default,\n  the sort order is ascending.\n\nLimited to 1 call on regular servers and 3 calls on premium servers."},"roundFloor":{"name":"roundFloor","signature":"{{ roundFloor x }}","doc":"Returns the largest integer less than or equal to `x`."},"getMember":{"name":"getMember","signature":"{{ getMember member }}","doc":"Returns the member object with the specified ID or mention."},"json":{"name":"json","signature":"{{ json v [indent] }}","doc":"Encodes the argument as JSON. If the `indent` flag is provided, the output is pretty-printed with appropriate indentation."},"html":{"name":"html","signature":"{{ html v }}","doc":"Returns the escaped HTML equivalent of the textual representation of its arguments."},"sleep":{"name":"sleep","signature":"{{ sleep seconds }}","doc":"Pauses the execution of the custom command for the specified number of seconds. The maximum total duration that a custom command can sleep for is 60 seconds."},"sendDM":{"name":"sendDM","signature":"{{ sendDM message }}","doc":"Sends a direct message to the triggering user."},"div":{"name":"div","signature":"{{ div x y... }}","doc":"Returns the result of dividing `x` by the following numbers in succession. The kind of division (integer or floating-point) to perform is determined by the type of the first argument, so\n```yag\n{{ div 5 2 }} {{/* outputs 2 */}}\n```\nperforms integer division. To force floating-point division, either cast the type of the first argument using `float64` or use the `fdiv` function."},"toInt64":{"name":"toInt64","signature":"{{ toInt64 x }}","doc":"Converts the input to an int64, returning zero for invalid inputs."},"execAdmin":{"name":"execAdmin","signature":"{{ execAdmin command args... }}","doc":"Executes the specified built-in command (optionally providing arguments) with the triggering user set to the bot."},"snowflakeToTime":{"name":"snowflakeToTime","signature":"{{ snowflakeToTime snowflake }}","doc":"Returns the UTC time at which the given Discord snowflake was created."},"updateMessageNoEscape":{"name":"updateMessageNoEscape","signature":"{{ updateMessageNoEscape newMessage }}","doc":"Same as `updateMessage`, but does not escape mentions."},"hasPrefix":{"name":"hasPrefix","signature":"{{ hasPrefix str prefix }}","doc":"Tests whether the string starts with the given prefix."},"urlescape":{"name":"urlescape","signature":"{{ urlescape str }}","doc":"Escapes the input so that it can be safely placed inside a URL path segment, replacing special characters (including /) with %XX sequences as needed."},"str":{"name":"str","signature":"{{ str x }}","doc":"Converts the input to a string, returning the empty string for invalid inputs. This function is an alias of the `toString` function."},"editMessage":{"name":"editMessage","signature":"{{ editMessage channel messageID newContent }}","doc":"Edits the specified message, escaping any mentions in the content."},"dbDelById":{"name":"dbDelById","signature":"{{ dbDelById userID entryID }}","doc":"An alias of `dbDelByID`."},"updateMessage":{"name":"updateMessage","signature":"{{ updateMessage newMessage }}","doc":"Edits the message that triggered the button, select menu, or modal.\n### Example\nThe following example must be triggered by a component or modal submission.\n```yag\n{{ $button := cbutton \"label\" \"I won!\" \"custom_id\" \"i_won\" }}\n{{ $content := printf \"Press this button when you win! The last person who won was %s! They wanted to say they are a %s %s.\" .User.Mention adjective noun }}\n\n{{ $message := complexMessageEdit \"content\" $content \"buttons\" $button }}\n{{ updateMessage $message }}\n```"},"and":{"name":"and","signature":"{{ and args... }}","doc":"Returns the boolean AND of the arguments by returning the first empty argument or the last argument. That is, `and x y` behaves as `if x then y else x`.\n\nUnlike in many other programming languages, `and` does not short-circuit: all the arguments are evaluated."},"currentUserCreated":{"name":"currentUserCreated","signature":"{{ currentUserCreated }}","doc":"Returns the time object corresponding to when the current user was created."},"sendResponseRetID":{"name":"sendResponseRetID","signature":"{{ sendResponseRetID interactionToken message }}","doc":"Same as `sendResponse`, but returns the message ID."},"complexMessage":{"name":"complexMessage","signature":"{{ complexMessage opts... }}","doc":"Creates a complex message object that can then be passed to the `sendMessage` functions.\n- `allowed_mentions`: a sdict with the following keys:\n  - `parse`: a slice of accepted values for mentions. May include `users`, `roles`, and `everyone`.\n  - `users`: a slice of user IDs to mention.\n  - `roles`: a slice of role IDs to mention.\n  - `replied_user`: whether to mention the replied user.\n- `content`: the message content.\n- `embed`: an embed object or a slice of up to 10 embed objects.\n- `file`: the content to print as a file.\n- `filename`: the name of the file.\n- `reply`: the ID of the message to reply to.\n- `silent`: whether to suppress push and desktop notifications.\nWhile there are no required keys, keep in mind that the Discord API will reject completely empty messages.\n### Example\nThe following example will output a message with an embed, some content, and a file attachment. It will also reply to the triggering message and ping the author of that message, but suppress the resulting notification.\n```yag\n{{ $message := complexMessage\n  \"allowed_mentions\" (sdict\n    \"replied_user\" true\n  )\n  \"content\" \"Hello, world!\"\n  \"embed\" (cembed\n    \"title\" \"Embed Title\"\n    \"description\" \"Embed Description\"\n    \"color\" 0xff0000\n  )\n  \"file\" \"This is a file.\"\n  \"filename\" \"example.txt\"\n  \"reply\" .Message.ID\n  \"silent\" true\n}}\n{{ sendMessage nil $message }}\n```"},"publishResponse":{"name":"publishResponse","signature":"{{ publishResponse }}","doc":"Publishes the response message.\n\nFor this to work, the custom command must be running in an announcement channel."},"addResponseReactions":{"name":"addResponseReactions","signature":"{{ addResponseReactions emojis... }}","doc":"Adds reactions to the response message.\n- `emojis...`: the emojis to react with. May also be a slice of emojis."},"gt":{"name":"gt","signature":"{{ gt x y }}","doc":"Returns the boolean truth of `x > y`."},"addReactions":{"name":"addReactions","signature":"{{ addReactions emojis... }}","doc":"Adds reactions to the triggering message.\n- `emojis...`: the emojis to react with. May also be a slice of emojis.\nDefault emojis should be specified using their Unicode form, and custom emojis should be specified using the format `name:id`. See the example below.\n### Example\n```yag\n{{ addReactions \"👍\" \"👎\" \"yagpdb:505114640032858114\" }}\n```"},"deleteForumPost":{"name":"deleteForumPost","signature":"{{ deleteForumPost post }}","doc":"Deletes the given forum post.\n\nThis function is an alias of `deleteThread`. Use whichever function is more semantically meaningful in the context of your custom command."},"cancelScheduledUniqueCC":{"name":"cancelScheduledUniqueCC","signature":"{{ cancelScheduledUniqueCC ccID key }}","doc":"Cancels a custom command execution previously scheduled via `scheduleUniqueCC`."},"decodeBase64":{"name":"decodeBase64","signature":"{{ decodeBase64 data }}","doc":"Decodes the provided base-64 data."},"bitwiseRightShift":{"name":"bitwiseRightShift","signature":"{{ bitwiseRightShift x shift }}","doc":"Returns `x >> shift`."},"reFindAll":{"name":"reFindAll","signature":"{{ reFindAll regex text [count] }}","doc":"Returns a slice of successive matches of the regular expression in the text. If `count` is provided, the number of matches is limited to that amount; otherwise, all matches are returned."},"min":{"name":"min","signature":"{{ min x y }}","doc":"Returns the smaller of the two numbers `x` and `y`."},"roleAbove":{"name":"roleAbove","signature":"{{ roleAbove x y }}","doc":"Returns whether the first role is above the second in the role hierarchy."},"getThread":{"name":"getThread","signature":"{{ getThread thread }}","doc":"Returns the thread object with the specified ID, name, or mention. Will not work for channels; use `getChannelOrThread` instead if that is desired."},"execTemplate":{"name":"execTemplate","signature":"{{ execTemplate template [data] }}","doc":"Executes the associated template with the specified name and context data. If the associated template returns a value, `execTemplate` evaluates to that value and `nil` otherwise."},"reSplit":{"name":"reSplit","signature":"{{ reSplit regex text [count] }}","doc":"Splits the text around each match of the regular expression, returning a slice of delimited substrings.\n\nIf the `count` parameter is specified, it limits the number of substrings to return:\n- `count > 0`: at most `count` substrings; the last substring will be the unsplit remainder;\n- `count == 0`: the result is nil (zero substrings);\n- `count < 0`: all substrings."},"newDate":{"name":"newDate","signature":"{{ newDate year month day hour minute second [location] }}","doc":"Returns the time object corresponding to\n```\nyyyy-mm-dd hh:mm:ss + nsec nanoseconds\n```\nin the appropriate zone for that time in the given location.\n\nThe month, day, hour, min, sec, and nsec values may be outside their usual ranges and will be normalized during the conversion. For example, October 32 converts to November 1.\n\nA daylight savings time transition skips or repeats times. For example, in the United States, March 13, 2011 2:15am never occurred, while November 6, 2011 1:15am occurred twice. In such cases, the choice of time zone, and therefore the time, is not well-defined. `newDate` returns a time that is correct in one of the two zones involved in the transition, but it does not guarantee which."},"getRole":{"name":"getRole","signature":"{{ getRole role }}","doc":"Returns the role object with the specified ID, name, or mention."},"mult":{"name":"mult","signature":"{{ mult x y... }}","doc":"Returns the product of the given numbers. As with `add`, `sub`, and `div`, he type of the result is determined by the type of the first argument, which can sometimes result in undesirable truncation if one is not careful. See the documentation of the `add` function for more detail."},"removeRoleID":{"name":"removeRoleID","signature":"{{ removeRoleID roleID [delay] }}","doc":"Removes the specified role from the triggering member after an optional delay in seconds."},"humanizeTimeSinceDays":{"name":"humanizeTimeSinceDays","signature":"{{ humanizeTimeSinceDays time }}","doc":"Returns the duration that has passed since the specified time as a human-readable string, rounded down to the nearest day."},"exec":{"name":"exec","signature":"{{ exec command args... }}","doc":"Executes the specified built-in command (optionally providing arguments) and returns its response."},"takeRole":{"name":"takeRole","signature":"{{ takeRole target role [delay] }}","doc":"Removes the specified role from the target member.\n- `target`: a user ID, mention, or user object. The target must be part of the server.\n- `role`: a role ID, mention, name or role object.\n- `delay`: an optional delay in seconds."},"dbGetPattern":{"name":"dbGetPattern","signature":"{{ dbGetPattern userID pattern amount numSkip }}","doc":"Returns up to `amount` entries from the database as a slice, sorted in ascending order **by entry ID**. To sort by entry value instead, see the `dbTopEntries` function.\n- `userID`: the user ID to filter entries by.\n- `pattern`: the PostgreSQL pattern to filter entries by.\n- `amount`: the maximum number of entries to return, capped at 100.\n- `numSkip`: the number of entries to skip before returning results.\nSee `dbGetPatternReverse` for a function that retrieves entries in descending order."},"sendResponseNoEscape":{"name":"sendResponseNoEscape","signature":"{{ sendResponseNoEscape interactionToken message }}","doc":"Same as `sendResponse`, but does not escape mentions."},"title":{"name":"title","signature":"{{ title str }}","doc":"Returns the string with the first letter of each word capitalized."},"publishMessage":{"name":"publishMessage","signature":"{{ publishMessage channel messageID }}","doc":"Publishes the specified message."},"roundEven":{"name":"roundEven","signature":"{{ roundEven x }}","doc":"Returns the nearest integer to `x`, preferring even integers in the case of a tie (`.5`)."},"log":{"name":"log","signature":"{{ log x [base] }}","doc":"Returns the logarithm of `x` in the given base. If no base is provided, the natural logarithm (that is, base `e`) is used."},"jsonToSdict":{"name":"jsonToSdict","signature":"{{ jsonToSdict jsonStr }}","doc":"Parses the JSON-encoded data into a string dictionary, returning an error if the input was invalid JSON."},"cembed":{"name":"cembed","signature":"{{ cembed opts... }}","doc":"Creates an embed object that can then be passed to the `sendMessage` functions.\n\nWhile there are no required keys, keep in mind that the Discord API will reject completely empty embeds.\n- `title`: the title of the embed.\n- `url`: the URL to hyperlink the title with.\n- `description`: the main text of the embed.\n- `color`: the integer value of the color to display on the left side of the embed.\n- `fields`: a slice of sdicts containing the following keys:\n  - `name`: the field name.\n  - `value`: the field contents.\n  - `inline`: whether the field should be displayed in line with other fields. Defaults to false.\n- `author`: a sdict specifying details displayed at the top of the embed, containing the following keys:\n  - `name`: the author name.\n  - `url`: the URL to hyperlink the author name with.\n  - `icon_url`: the author icon image URL.\n- `thumbnail`: a sdict specifying an image displayed in the top-right corner of the embed, containing\n  the following keys:\n  - `url`: the image's URL.\n- `image`: a sdict specifying an image to display at the bottom of the embed, containing the following keys:\n  - `url`: the image's URL.\n- `footer`: a sdict specifying details to be displayed at the bottom of the embed, containing the following keys:\n  - `text`: the footer text.\n  - `icon_url`: the footer icon image URL.\n- `timestamp`: a time object specifying a fixed timestamp displayed to the right of the footer text."},"shuffle":{"name":"shuffle","signature":"{{ shuffle list }}","doc":"Returns a shuffled copy of the provided array or slice."},"dbGetPatternReverse":{"name":"dbGetPatternReverse","signature":"{{ dbGetPatternReverse userID pattern amount numSkip }}","doc":"Returns up to `amount` entries from the database as a slice, sorted in descending order by **by entry ID**. To sort by entry value instead, use the `dbBottomEntries` function.\n- `userID`: the user ID to filter entries by.\n- `pattern`: the PostgreSQL pattern to filter entries by.\n- `amount`: the maximum number of entries to return, capped at 100.\n- `numSkip`: the number of entries to skip before returning results.\nSee `dbGetPattern` for a function that retrieves entries in ascending order."},"structToSdict":{"name":"structToSdict","signature":"{{ structToSdict struct }}","doc":"Constructs a sdict from the fields of the struct."},"scheduleUniqueCC":{"name":"scheduleUniqueCC","signature":"{{ scheduleUniqueCC ccID channel delay key data }}","doc":"Schedules a custom command execution, associating it by a custom key which can be used to cancel the custom command execution.\n- `ccID`: the ID of the custom command to execute.\n- `channel`: the channel to execute the custom command in. May be `nil`, a channel ID, or a channel name.\n- `delay`: the delay in seconds before executing the custom command.\n- `key`: an arbitrary key to identify the scheduled custom command, ideally unique.\n- `data`: arbitrary data to pass to the executed custom command.\nTo cancel a scheduled custom command execution, use `cancelScheduledUniqueCC`."},"kindOf":{"name":"kindOf","signature":"{{ kindOf value [indirect] }}","doc":"Returns the [reflection kind](https://pkg.go.dev/reflect#Kind) of the provided value.\n\nIf `value` is behind an `interface{}` or pointer, setting `indirect` to true will read the inner value. Most users of this function will want to do this."},"editNickname":{"name":"editNickname","signature":"{{ editNickname newNick }}","doc":"Edits the nickname of the triggering member. The bot must have the `MANAGE_NICKNAMES` permission and be higher in role hierarchy than the member. The bot cannot change the nickname of the server owner."},"le":{"name":"le","signature":"{{ le x y }}","doc":"Returns the boolean truth of `x <= y`."},"sendMessageRetID":{"name":"sendMessageRetID","signature":"{{ sendMessageRetID channel message }}","doc":"Same as `sendMessage`, but returns the message ID."},"in":{"name":"in","signature":"{{ in item value }}","doc":"Returns whether `item` contains `value`. The item may be a string or a slice of primitive values, and behaves as follows in each case:\n- If `item` is a string, the value must also be a string and `in` reports whether `value` is a substring of `item`.\n- Otherwise, if `item` is a slice of primitives, `in` reports whether the slice contains the element `value`.\nNote that `in` will not work for slices of complex values, such as slices of user objects."},"parseArgs":{"name":"parseArgs","signature":"{{ parseArgs numRequired errorMsg argDefs... }}","doc":"Parses the input to the custom command into structured arguments, ensuring they match the defined types. See the documentation of the `carg` function for how to define arguments and a listing of available types.\n\nIf the arguments are not of the expected types or if there are fewer than `numRequired` arguments, the specified `errorMsg` is output and custom command execution stops immediately after. If no error message is explicitly provided, one will be automatically generated based on the argument definitions.\n\nThe return value of `parseArgs` is an object with methods `$args.Get n` and `$args.IsSet n`. Calling `$args.IsSet n` reports whether the `n`th argument (zero-based) was provided, and `$args.Get n` retrieves that argument if so.\n### Example\n```yag\n{{ $args := parseArgs 1 \"\" (carg \"int\" \"coolness level\" 0 100) (carg \"member\" \"target member\") }}\nCoolness: {{ $args.Get 0 }}\n{{ if $args.IsSet 1 -}}\n  Target: {{ ($args.Get 1).User }}\n{{ else -}}\n  Target: {{ .User }}\n{{ end }}\n```"},"addMessageReactions":{"name":"addMessageReactions","signature":"{{ addMessageReactions channel messageID emojis... }}","doc":"Adds reactions to the specified message.\n- `emojis...`: the emojis to react with. May also be a slice of emojis."},"hasRole":{"name":"hasRole","signature":"{{ hasRole role }}","doc":"Reports whether the triggering member has the specified role.\n- `role`: a role ID, mention, name, or role object."},"addRoleID":{"name":"addRoleID","signature":"{{ addRoleID roleID [delay] }}","doc":"Adds the specified role to the triggering member after an optional delay in seconds."},"print":{"name":"print","signature":"{{ print args... }}","doc":"Concatenates the arguments in order, adding spaces between arguments when neither is a string."},"call":{"name":"call","signature":"{{ call fn args... }}","doc":"Returns the result of calling the first argument, which must be a function, with the remaining arguments as parameters. Thus `call .X.Y 1 2` is, in Go notation, `dot.X.Y(1, 2)` where Y is a func-valued field, map entry, or the like.\n\nThe first argument must be the result of an evaluation that yields a value of function type (as distinct from a predefined function such as print). The function must return either one or two result values, the second of which is of type error. If the arguments don't match the function or the returned error value is non-nil, execution stops."},"hash":{"name":"hash","signature":"{{ hash str }}","doc":"Generates a SHA256 hash of the input string."},"sendTemplateDM":{"name":"sendTemplateDM","signature":"{{ sendTemplateDM template [data] }}","doc":"Same as `sendTemplate`, but sends the response to the triggering user's direct messages instead and returns the ID of the response message."},"sendModal":{"name":"sendModal","signature":"{{ sendModal modal }}","doc":"Sends a modal to the member who triggered the interaction.\n- `modal`: an sdict with the following keys:\n  - `title`: the title of the modal.\n  - `custom_id`: a unique identifier for the modal.\n  - `fields`: a slice of sdicts with the following keys:\n    - `label`: the label for the field.\n    - `placeholder`: the placeholder text for the field.\n    - `value`: the default value for the field.\n    - `required`: whether the field is required.\n    - `style`: the style of the field (1 for short, 2 for long).\n    - `min_length`: the minimum length of the field.\n    - `max_length`: the maximum length of the field.\n### Example\n```yag\n{{ $modal := sdict\n  \"title\" \"My Custom Modal\"\n  \"custom_id\" \"modals-my_first_modal\"\n  \"fields\" (cslice\n    (sdict \"label\" \"Name\" \"placeholder\" \"Duck\" \"required\" true)\n    (sdict \"label\" \"Do you like ducks?\" \"value\" \"Heck no\")\n    (sdict \"label\" \"Duck hate essay\" \"min_length\" 100 \"style\")) }}\n{{ sendModal $modal }}\n```"},"cslice":{"name":"cslice","signature":"{{ cslice els... }}","doc":"Creates a slice containing the given elements in order."},"bitwiseAndNot":{"name":"bitwiseAndNot","signature":"{{ bitwiseAndNot x y }}","doc":"Returns `x & ~y`, effectively removing the bits in `y` from `x`."},"editChannelName":{"name":"editChannelName","signature":"{{ editChannelName channel newName }}","doc":"Edits the name of the specified channel.\n\nThis function is, together with `editChannelTopic`, limited to 10 calls per custom command execution. In addition, Discord ratelimits the number of channel modifications to 2 per 10 minutes."},"removeRole":{"name":"removeRole","signature":"{{ removeRole role [delay] }}","doc":"Removes the specified role from the triggering member.\n- `role`: a role ID, mention, name or role object.\n- `delay`: an optional delay in seconds."},"js":{"name":"js","signature":"{{ js v }}","doc":"Returns the escaped JavaScript equivalent of the textual representation of the arguments."},"createThread":{"name":"createThread","signature":"{{ createThread channel messageID name [private] [autoArchiveDuration] [invitable] }}","doc":"Creates a new thread in the specified channel. Returns a channel object on success.\n- `channel`: the parent channel to create the thread in.\n- `message`: either `nil` to create a channel thread, or a message ID to create a message thread.\n  Note that there is no functional difference between a channel thread and a message thread.\n- `private`: whether the thread is private. Defaults to false.\n- `auto_archive_duration`: how long the thread will show in the channel list after inactivity before it is archived.\n  Valid values are 60, 1440, 4320, and 10080 minutes. Defaults to 10080 (7 days).\n- `invitable`: whether non-moderators can add other members to the thread. Defaults to false.\nBecause the optional arguments are positional, modifying a given parameter requires specifying all earlier ones even if you only wish to change one parameter from the default. Consider the following example to create a public thread in the current channel that is archived after an hour and allows non-moderators to add others:\n```yag\n{{ createThread nil nil \"new thread\" false 60 true }}\n```"},"loadLocation":{"name":"loadLocation","signature":"{{ loadLocation location }}","doc":"Searches the IANA Time Zone database for the given location name, returning the corresponding location object on success. (Given a time object `$time`, `$time.In $location` then returns a copy of the time set in the given location for display purposes.)\n\nAs a special case, providing `UTC` or the empty string yields the UTC location. Providing `Local` yields the local time zone of the host YAGPDB server."},"createForumPost":{"name":"createForumPost","signature":"{{ createForumPost channel name content opts... }}","doc":"Creates a new forum post. Returns a channel object on success.\n- `channel`: the forum channel to post to.\n- `name`: the post title; may not be empty.\n- `content`: the initial message's content; may be a string, an embed, or a complex message. May not be empty.\n- `opts`: a sdict containing additional options for the post, supporting the following keys (all optional):\n  - `slowmode`: the thread's slowmode in seconds.\n  - `tags`: one or more forum tag name or ID. Duplicate and invalid tags are ignored."},"dbBottomEntries":{"name":"dbBottomEntries","signature":"{{ dbBottomEntries pattern amount numSkip }}","doc":"Returns up to `amount` entries from the database, sorted in descending order by numeric entry value then by entry ID.\n- `pattern`: the PostgreSQL pattern to filter entries by.\n- `amount`: the maximum number of entries to return, capped at 100.\n- `numSkip`: the number of entries to skip before returning results."},"sub":{"name":"sub","signature":"{{ sub x y... }}","doc":"Starting with `x`, subtract the following numbers in succession. The type of the result is determined by the first argument which can sometimes lead to undesirable truncation if one is not careful; see the documentation of the `add` function for more discussion."},"pinMessage":{"name":"pinMessage","signature":"{{ pinMessage channel messageID }}","doc":"Pins the specified message."},"weekNumber":{"name":"weekNumber","signature":"{{ weekNumber time }}","doc":"Returns the ISO 8601 week number in which the time occurs, ranging between 1 to 53. Jan 01 to Jan 03 of year n might belong to week 52 or 53 of year n-1, and Dec 29 to Dec 31 might belong to week 1 of year n+1."},"getChannelPins":{"name":"getChannelPins","signature":"{{ getChannelPins channel }}","doc":"Returns a slice of message objects pinned in the given channel or thread.\n\nLimited to 2 (premium: 4) calls per custom command execution."},"giveRoleName":{"name":"giveRoleName","signature":"{{ giveRoleName target roleName [delay] }}","doc":"Gives the specified role to the target member after an optional delay in seconds."},"dbDelMultiple":{"name":"dbDelMultiple","signature":"{{ dbDelMultiple query amount numSkip }}","doc":"Deletes up to `amount` entries from the database matching the given criteria. Returns the number of deleted entries.\n- `query`: a sdict filtering the entries to delete, supporting the following keys (all optional):\n  - `userID`: only delete entries with a matching user ID. Defaults to all users.\n  - `pattern`: only delete entries with keys matching the given pattern. Defaults to all keys.\n  - `reverse`: whether to delete entries with the lowest value first. Default is `false` (highest value first).\n- `amount`: the maximum number of entries to delete, capped at 100.\n- `numSkip`: the number of entries to skip before deleting."},"editResponseNoEscape":{"name":"editResponseNoEscape","signature":"{{ editResponseNoEscape interactionToken messageID newContent }}","doc":"Same as `editResponse`, but does not escape mentions."},"getChannel":{"name":"getChannel","signature":"{{ getChannel channel }}","doc":"Returns the channel object with the specified ID, name, or mention. Will not work for threads; use `getChannelOrThread` instead if that is desired."},"dbDelByID":{"name":"dbDelByID","signature":"{{ dbDelByID userID entryID }}","doc":"Deletes the database entry by entry ID."},"seq":{"name":"seq","signature":"{{ seq start stop }}","doc":"Creates a slice containing the integers between `start` (inclusive) and `stop` (exclusive) in order. Limited to 10,000 elements."},"userArg":{"name":"userArg","signature":"{{ userArg input }}","doc":"Returns the full user object specified by the input, which can be an ID or a mention."},"inFold":{"name":"inFold","signature":"{{ inFold item value }}","doc":"Same as `in`, but compares strings in a case-insensitive manner."},"mentionRoleName":{"name":"mentionRoleName","signature":"{{ mentionRoleName roleName }}","doc":"Mentions the role with the given name without escaping it."},"deleteMessage":{"name":"deleteMessage","signature":"{{ deleteMessage channel messageID [delay] }}","doc":"Deletes the specified message.\n- `delay`: an optional delay in seconds before deleting the response (default: 10 seconds). Max 86400 seconds,\ncorresponding to 1 day."},"cbutton":{"name":"cbutton","signature":"{{ cbutton opts... }}","doc":"Creates a [button object][discord-buttons] for use in interactions.\n\nA link style button *must* have a URL and may not have a Custom ID. All other styles *must* have a Custom ID and cannot have a URL. All buttons must have either a label or an emoji.\n\n[discord-buttons]: https://discord.com/developers/docs/interactions/message-components#button-object\n### Example\n```yag\n{{ $button := cbutton \"label\" \"Button\" \"custom_id\" \"buttons-duck\" }}\n{{ $message := complexMessage \"buttons\" $button }}\n{{ sendMessage nil $message }}\n```"},"targetHasPermissions":{"name":"targetHasPermissions","signature":"{{ targetHasPermissions target permissions }}","doc":"Reports whether the target member has the specified [permission bit][perm-bits].\n\n[perm-bits]: https://discord.com/developers/docs/topics/permissions#permissions-bitwise-permission-flags"},"closeThread":{"name":"closeThread","signature":"{{ closeThread thread [lock] }}","doc":"Closes the given thread, optionally locking it as well."},"giveRole":{"name":"giveRole","signature":"{{ giveRole target role [delay] }}","doc":"Gives the specified role to the target member.\n- `target`: a user ID, mention, or user object. The target must be part of the server.\n- `role`: a role ID, mention, name or role object.\n- `delay`: an optional delay in seconds."},"dbCount":{"name":"dbCount","signature":"{{ dbCount [query] }}","doc":"Returns the count of all database entries that are not expired.\n\nIf the `query` parameter is provided, it specifies which entries to include in the count and can be any of the following:\n- an **integer user ID**: only count entries for the given user ID.\n- a **string PostgreSQL pattern**: only count entries with keys matching the given pattern.\n- a **sdict** supporting the following keys:\n  - `userID`: only count entries with a matching user ID. Defaults to all users.\n  - `pattern`: only counts entries with keys matching the pattern. Defaults to all keys."},"deleteAllMessageReactions":{"name":"deleteAllMessageReactions","signature":"{{ deleteAllMessageReactions channel messageID userID emojis... }}","doc":"Deletes reactions from a message. By default, this function will remove all reactions, but setting the `emojis...` parameter will result in only those reactions being removed.\n- `emojis`: the reaction emojis to remove. May also be a slice of emojis. Omitting this argument will delete all reactions."},"trimSpace":{"name":"trimSpace","signature":"{{ trimSpace str }}","doc":"Returns the string with all leading and trailing whitespace removed."},"takeRoleName":{"name":"takeRoleName","signature":"{{ takeRoleName target roleName [delay] }}","doc":"Removes the specified role from the target member after an optional delay in seconds."},"getChannelOrThread":{"name":"getChannelOrThread","signature":"{{ getChannelOrThread channel }}","doc":"Returns the channel or thread object with the specified ID, name, or mention."},"hasRoleName":{"name":"hasRoleName","signature":"{{ hasRoleName roleName }}","doc":"Reports whether the triggering member has the specified role."},"pastNicknames":{"name":"pastNicknames","signature":"{{ pastNicknames userID offset }}","doc":"**Deprecated.** This function no longer works and will always return an error."},"targetHasRoleName":{"name":"targetHasRoleName","signature":"{{ targetHasRoleName target roleName }}","doc":"Reports whether the target member has the specified role."},"removeRoleName":{"name":"removeRoleName","signature":"{{ removeRoleName roleName [delay] }}","doc":"Removes the specified role from the triggering member after an optional delay in seconds."},"toByte":{"name":"toByte","signature":"{{ toByte str }}","doc":"Converts the given string to a slice of UTF-8 bytes."},"ephemeralResponse":{"name":"ephemeralResponse","signature":"{{ ephemeralResponse }}","doc":"Tells the bot to send the response text as an ephemeral message. Only works when triggered by an interaction. Works on responses and follow-ups.\n### Example\n```yag\n{{ ephemeralResponse }}\n\nThis text is invisible to others!\n```"},"dbTopEntries":{"name":"dbTopEntries","signature":"{{ dbTopEntries pattern amount numSkip }}","doc":"Returns up to `amount` entries from the database, sorted in descending order by numeric entry value then by entry ID.\n- `pattern`: the PostgreSQL pattern to filter entries by.\n- `amount`: the maximum number of entries to return, capped at 100.\n- `numSkip`: the number of entries to skip before returning results."},"sqrt":{"name":"sqrt","signature":"{{ sqrt x }}","doc":"Returns the square root of `x` as a floating-point number."},"getRoleName":{"name":"getRoleName","signature":"{{ getRoleName name }}","doc":"Returns the role object with the specified name."},"formatTime":{"name":"formatTime","signature":"{{ formatTime time [layout] }}","doc":"Formats the time according to the layout. Within the layout string, certain phrases represent placeholders that are replaced with data from the time: for instance, Monday is replaced with the weekday. A list of common placeholders follows; see [Go time package documentation](https://pkg.go.dev/time#pkg-constants) for the full list.\n\n| Placeholder | Meaning                      | |-------------|------------------------------| | Mon         | Weekday (abbreviated)        | | Monday      | Weekday (full name)          | | 2           | Day of month (single digit)  | | 02          | Day of month (zero padded)   | | Jan         | Month (abbreviated)          | | January     | Month (full name)            | | 1           | Month (single digit)         | | 01          | Month (zero padded)          | | 15          | Hour (24-hour format)        | | 3           | Hour (12-hour format)        | | 04          | Minute (zero padded)         | | 05          | Second (zero padded)         | | MST         | Timezone (abbreviated)       | | 2006        | Year (full year)             | | PM          | AM-PM                        |"},"roundCeil":{"name":"roundCeil","signature":"{{ roundCeil x }}","doc":"Returns the smallest integer greater than or equal to `x`."},"hasPermissions":{"name":"hasPermissions","signature":"{{ hasPermissions permission }}","doc":"Reports whether the triggering member has the specified [permission bit][perm-bits].\n\n**Tip:** The `.Permissions` context data field contains all the permission bits by name so that, for instance, `.Permissions.Administrator` is `0x0000000000000008`.\n\n[perm-bits]: https://discord.com/developers/docs/topics/permissions#permissions-bitwise-permission-flags"},"removeThreadMember":{"name":"removeThreadMember","signature":"{{ removeThreadMember thread member }}","doc":"Removes a member from the specified thread."},"or":{"name":"or","signature":"{{ or args... }}","doc":"Returns the boolean OR of its arguments by returning the first non-empty argument or the last argument, that is, `or x y` behaves as `if x then x else y`.\n\nUnlike in many other programming languages, `or` does not short-circuit: all the arguments are evaluated."},"getPinCount":{"name":"getPinCount","signature":"{{ getPinCount channel }}","doc":"Returns the number of pinned messages in the given channel."},"bitwiseLeftShift":{"name":"bitwiseLeftShift","signature":"{{ bitwiseLeftShift x shift }}","doc":"Returns `x << shift`."},"add":{"name":"add","signature":"{{ add x y... }}","doc":"Returns the sum of the given numbers. The type of the result is determined by the first argument; all subsequent arguments are cast to the same type. Hence,\n```yag\n{{ add 2 1.1 }} {{/* outputs 3, not 3.1 */}}\n```\nIf the default behavior results in undesired truncation, explicitly convert the first argument to the required type.\n```yag\n{{ add (toFloat 2) 1.1 }}\n```"},"pinForumPost":{"name":"pinForumPost","signature":"{{ pinForumPost post }}","doc":"Pins the given forum post."},"hasRoleID":{"name":"hasRoleID","signature":"{{ hasRoleID roleID }}","doc":"Reports whether the triggering member has the specified role."},"editMessageNoEscape":{"name":"editMessageNoEscape","signature":"{{ editMessageNoEscape channel messageID newContent }}","doc":"Edits the specified message without escaping mentions."},"deleteInteractionResponse":{"name":"deleteInteractionResponse","signature":"{{ deleteInteractionResponse interactionToken messageID [delay] }}","doc":"Deletes the specified response or follow-up message.\n- `interactionToken`: a valid interaction token or nil for the triggering interaction.\n- `messageID`: valid message ID of a follow-up, or nil for the original interaction response.\n- `delay`: an optional delay in seconds, max 10 seconds. Default: 10 seconds.\nIf you require a delay of more than 10 seconds, consider using `execCC` for deletion of an ephemeral response, or `deleteMessage` to delete a regular interaction response."},"reFind":{"name":"reFind","signature":"{{ reFind regex text }}","doc":"Returns the first match of the regular expression in the text, or the empty string if the pattern did not match anywhere."},"mathConst":{"name":"mathConst","signature":"{{ mathConst const }}","doc":"Returns the value of the specified math constant by name. See the [math constants list](https://pkg.go.dev/math#pkg-constants).\n### Example\n```yag\n{{ mathConst \"phi\" }} {{/* outputs 1.618... */}}\n```"},"reQuoteMeta":{"name":"reQuoteMeta","signature":"{{ reQuoteMeta str }}","doc":"Escapes all regular expression metacharacters in the input string; the result is a regular expression matching the literal input string."},"unpinMessage":{"name":"unpinMessage","signature":"{{ unpinMessage channel messageID }}","doc":"Unpins the specified message."},"addRole":{"name":"addRole","signature":"{{ addRole role [delay] }}","doc":"Adds the specified role to the triggering member.\n- `role`: a role ID, mention, name, or role object.\n- `delay`: an optional delay in seconds."},"reReplace":{"name":"reReplace","signature":"{{ reReplace regex text replacement }}","doc":"Replaces all occurrences of the regular expression in `text` with `replacement`."},"createTicket":{"name":"createTicket","signature":"{{ createTicket author topic }}","doc":"Creates a new ticket with the topic given and associated with the specified user.\n- `author`: the member to associate the ticket with.\n- `topic`: the topic of the ticket.\nFor this function to work, the ticket system must be enabled."},"targetHasRoleID":{"name":"targetHasRoleID","signature":"{{ targetHasRoleID target roleID }}","doc":"Reports whether the target member has the specified role."},"toRune":{"name":"toRune","signature":"{{ toRune str }}","doc":"Converts the given string to a slice of runes (that is, Unicode code points.)"},"index":{"name":"index","signature":"{{ index item keys... }}","doc":"Returns the result of indexing the first argument by the following arguments. Thus `index x 1 2 3` is, in Go syntax, `x[1][2][3]`. Each indexed item must be a map, slice, or array."},"cmenu":{"name":"cmenu","signature":"{{ cmenu opts... }}","doc":"Creates a [select menu object][discord-select-menus] for use in interactions.\n\nThe type should be provided as a string: `\"text\"`, `\"user\"`, `\"role\"`, `\"mentionable\"`, or `\"channel\"`. Text type menus *must* have `options`, while all other types cannot.\n\n[discord-select-menus]: https://discord.com/developers/docs/interactions/message-components#select-menu-object\n### Example\n```yag\n{{ $menu := cmenu\n  \"type\" \"text\"\n  \"placeholder\" \"Choose a terrible thing\"\n  \"custom_id\" \"menus-duck\"\n  \"options\" (cslice\n    (sdict \"label\" \"Two Ducks\" \"value\" \"opt-1\" \"default\" true)\n    (sdict \"label\" \"A Duck\" \"value\" \"duck-option\" \"emoji\" (sdict \"name\" \"🦆\"))\n    (sdict \"label\" \"Half a Duck\" \"value\" \"third-option\" \"description\" \"Don't let the smaller amount fool you.\"))\n  \"max_values\" 3\n}}\n\n{{ sendMessage nil (complexMessage \"menus\" $menu) }}\n```"},"sendResponse":{"name":"sendResponse","signature":"{{ sendResponse interactionToken message }}","doc":"Sends a message in response to an interaction. Supports the `ephemeral` flag in `complexMessage`."},"mentionHere":{"name":"mentionHere","signature":"{{ mentionHere }}","doc":"Mentions `@here` without escaping it."},"sendTemplate":{"name":"sendTemplate","signature":"{{ sendTemplate channel template [data] }}","doc":"Executes the specified associated template with optional data and sends its response to `channel`, returning the ID of the response message."},"onlineCountBots":{"name":"onlineCountBots","signature":"{{ onlineCountBots }}","doc":"**Deprecated.** This function no longer works and will always return `0`."},"bitwiseAnd":{"name":"bitwiseAnd","signature":"{{ bitwiseAnd x y }}","doc":"Returns `x & y`."},"randInt":{"name":"randInt","signature":"{{ randInt [min] max }}","doc":"Returns a uniformly distributed random integer in the half-open interval `[min, max)`. That is, `min` is included; `max` is excluded. If only one argument is given, it is interpreted as a maximum bound and a random integer in `[0, max)` is returned."},"ge":{"name":"ge","signature":"{{ ge x y }}","doc":"Returns the boolean truth of `x >= y`."},"bitwiseNot":{"name":"bitwiseNot","signature":"{{ bitwiseNot x }}","doc":"Returns `~x`."},"sdict":{"name":"sdict","signature":"{{ sdict keyvalues... }}","doc":"Creates a string dictionary from the provided key-value pairs. The number of arguments must be even."},"setRoles":{"name":"setRoles","signature":"{{ setRoles target newRoles }}","doc":"Edits the roles of the target member. The roles are completely overwritten, so any existing roles that do not appear in the new list will be removed.\n- `target`: a user ID, mention, or user object. The target must be part of the server.\n- `newRoles`: a slice of role IDs or role objects."},"sendMessageNoEscapeRetID":{"name":"sendMessageNoEscapeRetID","signature":"{{ sendMessageNoEscapeRetID channel message }}","doc":"Same as `sendMessageNoEscape`, but returns the message ID."},"toString":{"name":"toString","signature":"{{ toString x }}","doc":"Converts the input to a string, returning the empty string for invalid inputs."},"currentUserAgeMinutes":{"name":"currentUserAgeMinutes","signature":"{{ currentUserAgeMinutes }}","doc":"Returns the account age of the current user in a human-readable format, rounded down to minutes."},"println":{"name":"println","signature":"{{ println args... }}","doc":"Concatenates the arguments in order, adding spaces between arguments when neither is a string and inserting a newline at the end."},"targetHasRole":{"name":"targetHasRole","signature":"{{ targetHasRole target role }}","doc":"Reports whether the target member has the specified role.\n- `target`: a user ID, mention, or user object. The target must be part of the server.\n- `role`: a role ID, mention, name, or role object."},"toDuration":{"name":"toDuration","signature":"{{ toDuration x }}","doc":"Converts the input, which may be a number (measured in nanoseconds) or a duration string such as `5m`, to a duration object. Returns the zero duration for invalid inputs."},"editThread":{"name":"editThread","signature":"{{ editThread thread opts... }}","doc":"Edits the specified thread.\n- `opts`: a sdict containing the thread parameters to edit, supporting the following keys (all optional):\n  - `slowmode`: the thread's slowmode in seconds.\n  - `tags`: one or more forum tag name or ID. Duplicate and invalid tags are ignored.\n  - `auto_archive_duration`: how long the thread will show in the channel list after inactivity.\n    Valid values are 60, 1440, 4320, and 10080 minutes. Defaults to 10080 (7 days).\n  - `invitable`: whether non-moderators can add other members to the thread. Defaults to false."},"mentionEveryone":{"name":"mentionEveryone","signature":"{{ mentionEveryone }}","doc":"Mentions `@everyone` without escaping it."},"lt":{"name":"lt","signature":"{{ lt x y }}","doc":"Returns the boolean truth of `x < y`."},"bitwiseXor":{"name":"bitwiseXor","signature":"{{ bitwiseXor x y }}","doc":"Returns `x ^ y`."},"fdiv":{"name":"fdiv","signature":"{{ fdiv x y... }}","doc":"Returns the result of the floating-point division of `x` by the following numbers in succession."},"humanizeThousands":{"name":"humanizeThousands","signature":"{{ humanizeThousands x }}","doc":"Formats the number as a string with commas separating groups of thousands."},"getMessage":{"name":"getMessage","signature":"{{ getMessage channel messageID }}","doc":"Returns the full message object specified by the arguments."},"verb":{"name":"verb","signature":"{{ verb }}","doc":"Returns a random verb."},"currentTime":{"name":"currentTime","signature":"{{ currentTime }}","doc":"Returns the current time in UTC."},"parseTime":{"name":"parseTime","signature":"{{ parseTime input layout [location] }}","doc":"Undos the operation performed by `formatTime`: that is, given some input representing a time using the layout given, `parseTime` returns the corresponding time object in the specified location (or UTC by default). If the input is invalid or does not follow the layout, the zero time is returned.\n\nA slice of layouts may be provided, in which case the input is matched against each in order until one matches or the end of the slice is reached."},"deleteThread":{"name":"deleteThread","signature":"{{ deleteThread thread }}","doc":"Deletes the given thread."},"sanitizeText":{"name":"sanitizeText","signature":"{{ sanitizeText string }}","doc":"Replaces accented and confusable characters in the input with their normal, ISO-Latin variants."},"onlineCount":{"name":"onlineCount","signature":"{{ onlineCount }}","doc":"Returns the number of online members on the current server, including bots."},"toInt":{"name":"toInt","signature":"{{ toInt x }}","doc":"Converts the input to an integer, returning zero for invalid inputs."},"dbSetExpire":{"name":"dbSetExpire","signature":"{{ dbSetExpire userID key value ttl }}","doc":"Same as `dbSet` but with an additional expiry `ttl` in seconds."},"not":{"name":"not","signature":"{{ not v }}","doc":"Returns the boolean negation of the argument."},"openThread":{"name":"openThread","signature":"{{ openThread thread }}","doc":"Reopens the given thread."},"joinStr":{"name":"joinStr","signature":"{{ joinStr sep args... }}","doc":"Concatenates the arguments in order, inserting the given separator between consecutive arguments. As a special case, slices of strings are formatted as if each element was provided separately, so\n```yag\n{{ joinStr \" \" (cslice \"cat\" \"dog\") }}\n```\nyields `cat dog`.\n\nSee also the `print` function if you just want to concatenate arguments without a separator."},"slice":{"name":"slice","signature":"{{ slice item start [end] }}","doc":"Returns a subslice of the input item (which may be an array, slice, or string) containing the elements starting at index `start`, inclusive, and ending at index `end`, exclusive. If only one index is provided, it is interpreted as the start index and the slice extends to the end of the input."},"bitwiseOr":{"name":"bitwiseOr","signature":"{{ bitwiseOr x y }}","doc":"Returns `x | y`."},"addRoleName":{"name":"addRoleName","signature":"{{ addRoleName roleName [delay] }}","doc":"Adds the specified role to the triggering member after an optional delay in seconds."},"toFloat":{"name":"toFloat","signature":"{{ toFloat x }}","doc":"Converts the input to a float64, returning zero for invalid inputs."},"unpinForumPost":{"name":"unpinForumPost","signature":"{{ unpinForumPost post }}","doc":"Unpins the given forum post."},"editResponse":{"name":"editResponse","signature":"{{ editResponse interactionToken messageID newContent }}","doc":"Edits a response to an interaction.\n- `interactionToken`: the token of the interaction to edit. `nil` for the triggering interaction.\n- `messageID`: the ID of a follow-up message. `nil` for the original interaction response.\n- `newContent`: the new content for the message.\n### Example\nThe following example must be triggered by a component trigger or modal submission.\n```yag\n{{ $token := .Interaction.Token }}\n\n{{ sendResponse nil \"Here's the first message!\" }}\n{{ $id := sendResponseRetID $token (complexMessage \"content\" \"Here's a sneaky one!\" \"ephemeral\" true) }}\n\n{{ sleep 2 }}\n\n{{ editResponse $token $id (print \"I've edited this message to say \" noun) }}\n{{ $editedResponse := getResponse $token $id }}\n{{ editResponse $token nil $editedResponse.Content }}\n```"},"dbSet":{"name":"dbSet","signature":"{{ dbSet userID key value }}","doc":"Sets the value for the specified `key` and `userID` to `value`.\n- `value`: an arbitrary value to set."},"editChannelTopic":{"name":"editChannelTopic","signature":"{{ editChannelTopic channel newTopic }}","doc":"Edits the topic of the specified channel.\n\nThis function is, together with `editChannelName`, limited to 10 calls per custom command execution. In addition, Discord ratelimits the number of channel modifications to 2 per 10 minutes."},"urlunescape":{"name":"urlunescape","signature":"{{ urlunescape str }}","doc":"Undos the transformation performed by `urlescape`, converting encoded substrings of the form `%AB` to the byte 0xAB."},"deleteMessageReaction":{"name":"deleteMessageReaction","signature":"{{ deleteMessageReaction channel messageID userID emojis... }}","doc":"Deletes a specific user's reactions from a message.\n- `userID`: the ID of the user whose reaction to delete.\n- `emojis...`: one or more emojis to delete. May also be a slice of emojis."},"eq":{"name":"eq","signature":"{{ eq x y... }}","doc":"Returns the boolean truth of `x == y`.\n\nFor simpler multi-way equality tests, `eq` accepts two or more arguments and compares the second and subsequent arguments to the first, returning in effect\n```\narg1==arg2 || arg1==arg3 || arg1==arg4 ...\n```\nNote, however, that as `eq` is a function call, the comparison does not short-circuit and all the arguments will be evaluated."},"sendResponseNoEscapeRetID":{"name":"sendResponseNoEscapeRetID","signature":"{{ sendResponseNoEscapeRetID interactionToken message }}","doc":"Same as `sendResponseNoEscape`, but returns the message ID."},"pow":{"name":"pow","signature":"{{ pow base exp }}","doc":"Returns `base` raised to the power `exp` as a floating-point number."}}
